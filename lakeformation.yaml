AWSTemplateFormatVersion: '2010-09-09'
Description:  Deploys LF databases and configures perms

Parameters:
  LFDatabaseName:
    Type: String
    Default: lfdb

  LFTableName:
    Type: String
    Default: lfdb-table

  LFSAMLUserName:
    Type: String
    Default: analyst

  SAMLProviderName:
    Type: String
    Default: OktaSAMLProvider

  OktaAppMetadataURL:
    Type: String

# Resources section defines metadata for the Data Catalog
Resources:

  S3DataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-', ['emrblog-data', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]

  LFDataAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: 
      - customResourceForIdPLambda
    Properties:
      ManagedPolicyName: LF-DataAccess-Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Join
              - ''
              - - !GetAtt S3DataBucket.Arn
                - /Data/*
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource: !GetAtt S3DataBucket.Arn
      Roles:
        - !Ref LFDataAccessRole

  LFDataAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lakeformation.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: LF-EMR-DataAccessRole

  RegisterLFDataLocation:
    Type: 'AWS::LakeFormation::Resource'
    DependsOn:
      - customResourceForIdPLambda
    Properties:
      ResourceArn: !Join
        - ''
        - - !GetAtt S3DataBucket.Arn
          - /Data/
      RoleArn: !GetAtt LFDataAccessRole.Arn
      UseServiceLinkedRole: false

  LFDatabase:
    Type: AWS::Glue::Database
    DependsOn: customResourceForIdPLambda
    Properties:
      CatalogId: !Ref AWS::AccountId   
      DatabaseInput:
        Name: !Ref LFDatabaseName
        Description: Database to hold tables for vehicle data
        LocationUri: !Sub
          - 's3://${S3DataBucketName}/Data/'
          - S3DataBucketName: !Ref S3DataBucket

  LFDatabaseTable:
    DependsOn: 
      - LFDatabase
      - customResourceForIdPLambda
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref LFDatabaseName
      TableInput:
        Name: !Ref LFTableName
        Description: Columns for car/toll data
        TableType: EXTERNAL_TABLE
        Parameters: {
          "classification": "csv"
        }     
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
          - Name: tollid
            Type: bigint
          - Name: col_dateyear
            Type: bigint
          - Name: rfid
            Type: bigint
          - Name: col_dateday
            Type: bigint
          - Name: vehicle_type
            Type: string
          - Name: col_datemonth
            Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub
            - 's3://${S3DataBucketName}/Data/'
            - S3DataBucketName: !Ref S3DataBucket
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  LFTablePerms:
    Type: AWS::LakeFormation::Permissions
    DependsOn: 
      - customResourceForIdPLambda
      - LFDatabaseTable
    Properties: 
      DataLakePrincipal: 
        DataLakePrincipalIdentifier: !Sub arn:aws:iam::${AWS::AccountId}:saml-provider/${SAMLProviderName}-${AWS::StackName}:user/${LFSAMLUserName}
      Permissions: 
        - SELECT
      Resource: 
        TableResource:
          CatalogId: !Ref AWS::AccountId
          DatabaseName: !Ref LFDatabaseName
          Name: !Ref LFTableName

  IdPLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: idp-Lambda-Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'iam:CreateSAMLProvider'
              - 'iam:DeleteSAMLProvider'
            Resource: '*'
            Effect: Allow
          - Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetBucketLocation'
              - 's3:AbortMultipartUpload'
              - 's3:DeleteObject'
              - 's3:List*'
            Resource:
              - !GetAtt S3DataBucket.Arn
              - !Sub 
                - '${S3DataBucketArn}/*'
                - S3DataBucketArn: !GetAtt S3DataBucket.Arn
            Effect: Allow
          - Action:
              - 's3:GetObject'
              - 's3:List*'
            Resource:
              - 'arn:aws:s3:::emr-okta-blog'
              - 'arn:aws:s3:::emr-okta-blog/data/*'
              - 'arn:aws:s3:::emr-okta-blog/artifacts/*'
            Effect: Allow
          - Action: 'logs:CreateLogGroup'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Effect: Allow
          - Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub >-
                arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/exportIdPMetadata-${AWS::StackName}:*
            Effect: Allow
      Roles:
        - !Ref IdPLambdaExecutionRole
  IdPLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub 'IdP-Lambda-Role-${AWS::StackName}'
  
  exportIdPMetadataLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: exportIdpMetadata.handler
      FunctionName: !Sub 'exportIdPMetadata-${AWS::StackName}'
      Runtime: python3.9
      Code:
        S3Bucket: emr-okta-blog
        S3Key: >-
          artifacts/exportidpmetadata.py.zip
      Description: 'Prepares data and creates IdP metadata entry.'
      MemorySize: 128
      Timeout: 900
      Role: !GetAtt IdPLambdaExecutionRole.Arn

  customResourceForIdPLambda:
    Type: 'AWS::CloudFormation::CustomResource'
    DependsOn:
      - IdPLambdaExecutionRole
      - IdPLambdaPolicy
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt exportIdPMetadataLambda.Arn
      StackName: !Ref 'AWS::StackName'
      DataBucketName: !Ref S3DataBucket
      SAMLProviderName: !Sub ${SAMLProviderName}-${AWS::StackName}
      AWSAccountId: !Sub '${AWS::AccountId}'
      OktaAppMetadataURL: !Ref OktaAppMetadataURL
      SourceBucketName: 'emr-okta-blog'

Outputs:
  DataBucketName:
    Description: S3DataBucket
    Value: !Ref S3DataBucket
  DataBucketArn:
    Description: S3DataBucket ARN
    Value: !GetAtt S3DataBucket.Arn
  SAMLProviderArn:
    Description: SAML Provider ARN
    Value: !GetAtt customResourceForIdPLambda.SAMLProviderArn
  
  

